// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"

}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(USER)
  transactions Transaction[]
}

model Book {
  id        Int      @id @default(autoincrement())
  title     String
  author    String?
  genre     String?
  totalCopies     Int
  availableCopies Int
  pricing   Pricing?
  transactions Transaction[]
}

model Pricing {
  bookId       Int    @id
  buyPrice     Float
  borrowPrice  Float
  book         Book   @relation(fields: [bookId], references: [id])
}

model Transaction {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  book       Book     @relation(fields: [bookId], references: [id])
  bookId     Int
  type       TransactionType
  price      Float
  date       DateTime @default(now())
  dueDate    DateTime?
  status     TransactionStatus
  return     Return?
}

model Return {
  id             Int   @id @default(autoincrement())
  transactionId  Int   @unique
  returnDate     DateTime
  lateFee        Float
  transaction    Transaction @relation(fields: [transactionId], references: [id],onDelete: Cascade)
}

enum Role {
  ADMIN
  USER
}

enum TransactionType {
  BUY
  BORROW
}
enum TransactionStatus {
  ONGOING
  RETURNED
  COMPLETED
}
